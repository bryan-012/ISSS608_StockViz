---
title: "Take-home Exercise 03 - StockViz - Confirmatory Analysis"
author: "Justin Lim Zheng Han"
date: "March 19, 2025"
date-modified: "last-modified"  
---

# Confirmatory Data Analysis

## Getting Started

### Installing the required R packages

We will load the following packages by using the pacman::p_load function:

tidyquant, tidyverse, xts, timeDate, lubridate, writexl, broom, sandwich, lmtest, dplyr, tidyr, GGally, corrplot, zoo, plotly, scales, moments, gt, gtExtras

```{r}
#| echo: false

pacman::p_load(tidyquant, tidyverse, xts, timeDate, lubridate, writexl, broom, sandwich, lmtest, dplyr, tidyr, GGally, corrplot, zoo, plotly, scales, moments, gt, gtExtras)
```

### Loading the Dataset

Our stock data will be retrieved from Yahoo Finance using quantmod. In Shiny App, Data will be pulled real-time according to user's selection. For now below data will be used to demonstrate EDA and CDA.

### üì¶ Simulated User Portfolio Input

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Simulate user portfolio (can be dynamic in Shiny later) 
user_portfolio <- data.frame(
  symbol = c("AAPL", "MSFT", "TSLA", "NVDA", "AMZN", "NVDA"),
  buy_date = as.Date(c("2022-01-15", "2022-02-20", "2022-03-10", "2022-04-05", "2022-05-12", "2024-01-17")),
  quantity = c(10, 15, 5, 8, 12, 7)
)
user_portfolio
```

## Data Overview (Exploratory Data Analysis)

### Portfolio-Level Summary (Portfolio Analysis Function)

In R Shiny, user will be able to select the stocks they have in their Portfolio. From the selected stocks, EDA will run accordingly.

### üìà Download Stock Price Data from Yahoo Finance

In R Shiny, user will be able to select the stocks they have in their Portfolio. 
From the selected stocks, EDA will run accordingly.

#### üì¶ Simulated User Portfolio Input

After user adds their chosen stocks into their portfolio, it will be added to a dataframe.
```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

# üì¶ Function: Prepare User Portfolio Input
tidy_user_portfolio <- function() {
  data.frame(
    symbol = c("AAPL", "MSFT", "TSLA", "NVDA", "AMZN", "NVDA"),
    buy_date = as.Date(c("2022-01-15", "2022-02-20", "2022-03-10", "2022-04-05", "2022-05-12", "2024-01-17")),
    quantity = c(10, 15, 5, 8, 12, 7),
    buy_price = c(NA, 287, NA, 26, NA, 55)
  )
}
```

### üìä Calculate Returns and Current Values

From the date and buy-in price of the stocks, the current returns will be calculated and added to the results column.
```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

# üìà Pull Stock Data
get_stock_data <- function(user_portfolio) {
  data_start <- min(user_portfolio$buy_date, na.rm = TRUE)
  stock_data_raw <- tq_get(unique(user_portfolio$symbol), from = data_start, to = Sys.Date())

  stock_data <- stock_data_raw %>%
    group_by(symbol, date) %>%
    summarise(
      open = first(open),
      high = max(high, na.rm = TRUE),
      low = min(low, na.rm = TRUE),
      close = last(close),
      volume = sum(volume, na.rm = TRUE),
      adjusted = last(adjusted),
      .groups = "drop"
    )

  return(stock_data)
}
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

# Initialize storage lists
track_portfolio_returns <- function(user_portfolio, stock_data) {
  portfolio_results <- list()
  summary_list <- list()
  skipped_stocks <- c()

  for (i in 1:nrow(user_portfolio)) {
    stock <- user_portfolio$symbol[i]
    buy_date_input <- user_portfolio$buy_date[i]
    qty <- user_portfolio$quantity[i]
    buy_price_user <- user_portfolio$buy_price[i]

    stock_prices <- stock_data %>% filter(symbol == stock)
    available_dates <- stock_prices$date
    valid_buy_date <- max(available_dates[available_dates <= buy_date_input])

    if (is.infinite(valid_buy_date) | is.na(valid_buy_date)) {
      warning(paste("No available trading date before", buy_date_input, "for", stock, "- skipping..."))
      skipped_stocks <- c(skipped_stocks, stock)
      next
    }

    day_row <- stock_prices %>% filter(date == valid_buy_date)
    day_high <- max(day_row$high, na.rm = TRUE)
    day_low  <- min(day_row$low, na.rm = TRUE)
    median_price <- median(day_row$adjusted, na.rm = TRUE)

    if (is.na(median_price) || median_price == 0) {
      warning(paste("‚ö† No valid price data on", valid_buy_date, "for", stock, "- skipping..."))
      next
    }

    if (!is.na(buy_price_user)) {
      buy_price <- buy_price_user
      buy_price_source <- "User Input"
      price_out_of_range <- buy_price < day_low | buy_price > day_high
      if (price_out_of_range) {
        warning(paste0("‚ö† BUY PRICE OUT OF RANGE for ", stock, ": $", round(buy_price_user, 2),
                       " is outside [$", round(day_low, 2), " ‚Äì $", round(day_high, 2), "] on ", valid_buy_date))
      }
    } else {
      buy_price <- median_price
      buy_price_source <- "Median Price"
      price_out_of_range <- FALSE
    }

    tracking_data <- stock_prices %>%
      filter(date >= valid_buy_date) %>%
      arrange(date) %>%
      mutate(
        return_since_buy = (adjusted / buy_price) - 1,
        current_value = adjusted * qty,
        stock = stock,
        buy_date = valid_buy_date,
        quantity = qty,
        buy_price = buy_price,
        invested_amount = buy_price * qty,
        holding_value = adjusted * qty,
        unrealized_return = (adjusted - buy_price) * qty,
        position_id = paste0(stock, "_", valid_buy_date)
      )

    portfolio_results[[i]] <- tracking_data

    summary_list[[i]] <- tibble(
      stock = stock,
      buy_date = valid_buy_date,
      quantity = qty,
      buy_price = buy_price,
      buy_price_source = buy_price_source,
      day_low = day_low,
      day_high = day_high,
      price_out_of_range = price_out_of_range,
      invested_amount = buy_price * qty,
      current_price = tail(tracking_data$adjusted, 1),
      current_value = tail(tracking_data$holding_value, 1),
      unrealized_return = tail(tracking_data$unrealized_return, 1),
      return_percent = tail(tracking_data$return_since_buy, 1)
    )
  }

  list(
    portfolio_tracking_all = bind_rows(portfolio_results),
    portfolio_summary = bind_rows(summary_list),
    skipped_stocks = skipped_stocks
  )
}
```

#### Portfolio Summary

From the results, we will tabulate it and put it into a Portfolio Summary. This allows the user to have a quick overview of their current holdings. 

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

# Clean summary
generate_portfolio_summary <- function(portfolio_summary) {
  portfolio_summary_clean <- portfolio_summary %>%
    mutate(
      `Buy Price Status` = case_when(
        is.na(price_out_of_range) ~ "N/A",
        price_out_of_range ~ "‚ùå Out of Range",
        TRUE ~ "‚úî OK"
      ),
      `Return (%)` = percent(return_percent),
      `Unrealized Return ($)` = dollar(unrealized_return)
    ) %>%
    select(
      Stock = stock,
      `Buy Date` = buy_date,
      Quantity = quantity,
      `Buy Price ($)` = buy_price,
      `Price Source` = buy_price_source,
      `Day Low ($)` = day_low,
      `Day High ($)` = day_high,
      `Buy Price Status`,
      `Invested Amount ($)` = invested_amount,
      `Current Price ($)` = current_price,
      `Current Value ($)` = current_value,
      `Unrealized Return ($)`,
      `Return (%)`
    )

  # üìä Return GT Table
  portfolio_summary_clean %>%
    gt() %>%
    tab_header(title = "üìä Portfolio Summary with % and $ Return") %>%
    fmt_currency(columns = c(
      `Buy Price ($)`, `Day Low ($)`, `Day High ($)`,
      `Invested Amount ($)`, `Current Price ($)`, `Current Value ($)`
    )) %>%
    data_color(
      columns = `Buy Price Status`,
      fn = function(x) ifelse(x == "‚ùå Out of Range", "tomato", "lightgreen")
    )
}
```


### üìã Portfolio Summary (Latest Value & Return)

If the user accidentally keys in the wrong buy date, for example AAPL on 2022-01-15, which is a non-trading day. The system knows and will generate a warning to the user and this entry will not be added to the stock analysis.

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

# Step 1: Simulate or get user portfolio
user_portfolio <- tidy_user_portfolio()

# Step 2: Pull stock data
stock_data <- get_stock_data(user_portfolio)

# Step 3: Track portfolio returns
portfolio_output <- track_portfolio_returns(user_portfolio, stock_data)

# Extract outputs from the list
portfolio_tracking_all <- portfolio_output$portfolio_tracking_all
portfolio_summary <- portfolio_output$portfolio_summary
skipped_stocks <- portfolio_output$skipped_stocks
```

### üìà Stocks Skipped

This code generates a message for the stocks being skipped.

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

if (length(skipped_stocks) > 0) {
  message("‚ö† Skipped Stocks: ", paste(skipped_stocks, collapse = ", "))
}
```

### üìã Portfolio Summary (Latest Value & Return)

This Portfolio Summary generated shows all the stocks added by the user. If the user could not remember the price it was bought, they can leave it blank and the system will use the median price. 

Column: 
- Stock: Stock Symbol
- Buy Date: Buy-in Date
- Quantity: Number of stocks 
- Price Source: User input or Median Price if buy price is left blank.
- Day's low and high price: User can gauge if the price they bought in is fair. The next column checks if the buy in price is within range. 
- Buy Price Status: Checks if buy price is within valid day range.
- Invested Amount: Total amount invested (Buy price x quantity)
- Current Price: Current stock price
- Current Value: Current holding value
- Unrealized Return: Current profit or loss (Current Value - Invested Amount)
- Return (%): Percentage of profit or loss

```{r}
# Step 4: Show portfolio summary table (rendered using gt)
generate_portfolio_summary(portfolio_summary)
```

### üìà Plot Return Since Buy Date (All Stocks)

This chart shows the cumulative return of each stock since its purchase date.

```{r}
#| echo: false

ggplot(portfolio_tracking_all, aes(x = date, y = return_since_buy, color = position_id)) +
  geom_line(linewidth = 1) +
  labs(title = "Cumulative Return Since Buy Date (By Position)", y = "Return", x = "Date") +
  scale_y_continuous(labels = scales::percent)
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

ggplot(portfolio_tracking_all, aes(x = date, y = return_since_buy, color = position_id)) +
  geom_line(linewidth = 1) +
  labs(title = "Cumulative Return Since Buy Date (By Position)", y = "Return", x = "Date") +
  scale_y_continuous(labels = scales::percent)
```

### üìà Interactive Plot Return for each Stock

This chart shows the interactive chart of return for each stock. User is able to see the price trend of each stock and to find the best exit point. They will also be able to see the trend of each stock.
```{r}
#| echo: false

plot_ly(
  data = portfolio_tracking_all,
  x = ~date,
  y = ~holding_value,
  color = ~position_id,
  type = 'scatter',
  mode = 'lines',
  text = ~paste0(
    "Stock: ", stock, "<br>",
    "Buy Date: ", buy_date, "<br>",
    "Date: ", format(date, "%Y-%m-%d"), "<br>",
    "Value: $", format(round(holding_value, 2), big.mark = ",")
  ),
  hoverinfo = "text"
) %>%
  layout(
    title = "Individual Stock Value Over Time (By Buy-in Position)",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Holding Value (USD)")
  )
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

plot_ly(
  data = portfolio_tracking_all,
  x = ~date,
  y = ~holding_value,
  color = ~position_id,
  type = 'scatter',
  mode = 'lines',
  text = ~paste0(
    "Stock: ", stock, "<br>",
    "Buy Date: ", buy_date, "<br>",
    "Date: ", format(date, "%Y-%m-%d"), "<br>",
    "Value: $", format(round(holding_value, 2), big.mark = ",")
  ),
  hoverinfo = "text"
) %>%
  layout(
    title = "Individual Stock Value Over Time (By Buy-in Position)",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Holding Value (USD)")
  )
```

### üì¶ Total Portfolio Value Over Time

This chart shows the total portfolio value over time with X-Axis for date and Y-Axis for value. User will be able to see fluctuations over time and the trend of their portfolio.

```{r}
#| echo: false

total_portfolio <- portfolio_tracking_all %>%
  group_by(date) %>%
  summarise(total_value = sum(holding_value), .groups = "drop")

ggplot(total_portfolio, aes(x = date, y = total_value)) +
  geom_line(color = "darkgreen", size = 1.2) +
  labs(title = "Total Portfolio Value Over Time", y = "Value (USD)", x = "Date") +
  scale_y_continuous(labels = scales::dollar)
```
```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

total_portfolio <- portfolio_tracking_all %>%
  group_by(date) %>%
  summarise(total_value = sum(holding_value), .groups = "drop")

ggplot(total_portfolio, aes(x = date, y = total_value)) +
  geom_line(color = "darkgreen", size = 1.2) +
  labs(title = "Total Portfolio Value Over Time", y = "Value (USD)", x = "Date") +
  scale_y_continuous(labels = scales::dollar)
```

### ‚úÖ Summary

-   Simulated multi-stock portfolio
-   Live Yahoo Finance data via `tq_get()`
-   Return tracking since individual buy dates
-   Portfolio-level return and value plots

#### Stock Price Trend

From this chart, user can observe performance trends, determining which holdings has the strongest growth. 

```{r}
#| echo: false

ggplot(stock_data, aes(x = date, y = adjusted, color = symbol)) +
  geom_line() +
  labs(title = "Adjusted Closing Price Over Time", y = "Adjusted Price", x = "Date")
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

ggplot(stock_data, aes(x = date, y = adjusted, color = symbol)) +
  geom_line() +
  labs(title = "Adjusted Closing Price Over Time", y = "Adjusted Price", x = "Date")
```

#### Rolling

20-Day rolling volatility chart is a powerful tool to evaluate risk and market behaviour over time. 
Higher volatility has the biggest spikes. Frequent large price swings indicates possible speculative behaviour, earnings surprises or broader market sentiment.
Higher volatility implies higher risk and reward potential.
Low and stable volatility are typically in the 1-3% range. These stocks are less risky in terms of price fluctuations.

```{r}
#| echo: false

stock_data <- stock_data %>%
  group_by(symbol) %>%
  arrange(date) %>%
  mutate(
    daily_return = adjusted / lag(adjusted) - 1,
    rolling_vol_20 = rollapply(daily_return, width = 20, FUN = sd, fill = NA, align = "right")
  ) %>%
  ungroup()

ggplot(stock_data %>% filter(!is.na(rolling_vol_20)), 
       aes(x = date, y = rolling_vol_20, color = symbol)) +
  geom_line(size = 1) +
  labs(
    title = "20-Day Rolling Volatility (Standard Deviation of Daily Returns)",
    x = "Date",
    y = "Rolling Volatility (Std Dev)"
  ) +
  scale_y_continuous(labels = scales::percent)
```
```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

stock_data <- stock_data %>%
  group_by(symbol) %>%
  arrange(date) %>%
  mutate(
    daily_return = adjusted / lag(adjusted) - 1,
    rolling_vol_20 = rollapply(daily_return, width = 20, FUN = sd, fill = NA, align = "right")
  ) %>%
  ungroup()

ggplot(stock_data %>% filter(!is.na(rolling_vol_20)), 
       aes(x = date, y = rolling_vol_20, color = symbol)) +
  geom_line(size = 1) +
  labs(
    title = "20-Day Rolling Volatility (Standard Deviation of Daily Returns)",
    x = "Date",
    y = "Rolling Volatility (Std Dev)"
  ) +
  scale_y_continuous(labels = scales::percent)
```

### Individual stock-level EDA

#### Descriptive Statistics

From descriptive statistics, user can understand the best and worst performing stock. 

```{r}
portfolio_tracking_all %>%
  group_by(position_id) %>%
  summarise(
    stock = first(stock),
    buy_date = first(buy_date),
    mean_return = mean(return_since_buy, na.rm = TRUE),
    sd_return = sd(return_since_buy, na.rm = TRUE),
    median_return = median(return_since_buy, na.rm = TRUE),
    min_return = min(return_since_buy, na.rm = TRUE),
    max_return = max(return_since_buy, na.rm = TRUE),
    .groups = "drop"
  )
```

mean_return: Daily gain on average 

sd_return: Daily volatility 

median_return: Median 

min_return: Minimum return 

max_return: Maximum return

#### Cumulative Returns

Each line represents the performance of a specific stock starting from the user's buy date. It give the user an answer on how much they have gain or loss from this specific investment over time.

```{r}
#| echo: false

portfolio_tracking_all <- portfolio_tracking_all %>%
  arrange(stock, buy_date, date) %>%
  group_by(position_id) %>%
  mutate(
    cumulative_return = cumprod(1 + coalesce(return_since_buy, 0))
  ) %>%
  ungroup()

ggplot(portfolio_tracking_all, aes(x = date, y = return_since_buy, color = position_id)) +
  geom_line(size = 1) +
  labs(
    title = "Cumulative Return Since Buy Date (Per Buy-in)",
    x = "Date",
    y = "Cumulative Return"
  ) +
  scale_y_continuous(labels = scales::percent) +
  theme_minimal()
```
```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

portfolio_tracking_all <- portfolio_tracking_all %>%
  arrange(stock, buy_date, date) %>%
  group_by(position_id) %>%
  mutate(
    cumulative_return = cumprod(1 + coalesce(return_since_buy, 0))
  ) %>%
  ungroup()

ggplot(portfolio_tracking_all, aes(x = date, y = return_since_buy, color = position_id)) +
  geom_line(size = 1) +
  labs(
    title = "Cumulative Return Since Buy Date (Per Buy-in)",
    x = "Date",
    y = "Cumulative Return"
  ) +
  scale_y_continuous(labels = scales::percent) +
  theme_minimal()
```

### Correlation analysis

Daily return correlation matrix reveals how similarly or differently the stocks move on a daily basis in terms of their returns.

```{r}
#| echo: false

# Ensure daily return is available (if not already calculated)
stock_data <- stock_data %>%
  group_by(symbol) %>%
  arrange(date) %>%
  mutate(daily_return = adjusted / lag(adjusted) - 1) %>%
  ungroup()

# Summarise to ensure one return per symbol-date (safety step)
returns_clean <- stock_data %>%
  group_by(date, symbol) %>%
  summarise(daily_return = mean(daily_return, na.rm = TRUE), .groups = "drop")

# Pivot wider
returns_matrix <- returns_clean %>%
  pivot_wider(names_from = symbol, values_from = daily_return)

# Ensure numeric
returns_matrix <- returns_matrix %>%
  mutate(across(-date, as.numeric))

# Compute correlation matrix
returns_corr <- cor(returns_matrix %>% select(-date), use = "pairwise.complete.obs")

# Plot
corrplot(
  returns_corr,
  method = "color",
  addCoef.col = "black",
  number.cex = 0.8,
  title = "Daily Return Correlation Matrix",
  mar = c(0, 0, 2, 0)
)
```
```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Ensure daily return is available (if not already calculated)
stock_data <- stock_data %>%
  group_by(symbol) %>%
  arrange(date) %>%
  mutate(daily_return = adjusted / lag(adjusted) - 1) %>%
  ungroup()

# Summarise to ensure one return per symbol-date (safety step)
returns_clean <- stock_data %>%
  group_by(date, symbol) %>%
  summarise(daily_return = mean(daily_return, na.rm = TRUE), .groups = "drop")

# Pivot wider
returns_matrix <- returns_clean %>%
  pivot_wider(names_from = symbol, values_from = daily_return)

# Ensure numeric
returns_matrix <- returns_matrix %>%
  mutate(across(-date, as.numeric))

# Compute correlation matrix
returns_corr <- cor(returns_matrix %>% select(-date), use = "pairwise.complete.obs")

# Plot
corrplot(
  returns_corr,
  method = "color",
  addCoef.col = "black",
  number.cex = 0.8,
  title = "Daily Return Correlation Matrix",
  mar = c(0, 0, 2, 0)
)
```

Observation:

-   AMZN and MSFT show the highest correlation in your portfolio ‚Äî likely due to their similar sector dynamics (large-cap tech, index-driven movements).

#### Return Vs Votality

This is a Return vs Volatility scatter plot, a classic visualization of the risk-return tradeoff. It helps investors quickly assess which stocks offer better return for the level of risk they carry.

Observations: 
NVDA has the highest return and high volatility. It has great return-to-risk ratio if volatility is acceptable.
TSLA is among the riskiest but has lower return than NVDA.
MSFT and AAPL are great for conservative investors seeking stability. They have low volatility and low return.
According to user's portfolio strategy, they can decide their next investment according to their current holdings.

```{r}
#| echo: false

# Step 1: Calculate mean return and volatility per stock
return_volatility_stats <- stock_data %>%
  group_by(symbol) %>%
  summarise(
    mean_return = mean(daily_return, na.rm = TRUE),
    volatility = sd(daily_return, na.rm = TRUE),
    .groups = "drop"
  )

# Step 2: Plot the Risk‚ÄìReturn scatter plot
ggplot(return_volatility_stats, aes(x = volatility, y = mean_return, label = symbol)) +
  geom_point(size = 4, color = "darkblue") +
  geom_text(nudge_y = 0.0005, fontface = "bold") +
  labs(
    title = "Return vs Volatility (Risk‚ÄìReturn Tradeoff)",
    x = "Volatility (Standard Deviation of Daily Return)",
    y = "Mean Daily Return"
  ) +
  scale_x_continuous(labels = scales::percent) +
  scale_y_continuous(labels = scales::percent) +
  theme_minimal()
```
```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Step 1: Calculate mean return and volatility per stock
return_volatility_stats <- stock_data %>%
  group_by(symbol) %>%
  summarise(
    mean_return = mean(daily_return, na.rm = TRUE),
    volatility = sd(daily_return, na.rm = TRUE),
    .groups = "drop"
  )

# Step 2: Plot the Risk‚ÄìReturn scatter plot
ggplot(return_volatility_stats, aes(x = volatility, y = mean_return, label = symbol)) +
  geom_point(size = 4, color = "darkblue") +
  geom_text(nudge_y = 0.0005, fontface = "bold") +
  labs(
    title = "Return vs Volatility (Risk‚ÄìReturn Tradeoff)",
    x = "Volatility (Standard Deviation of Daily Return)",
    y = "Mean Daily Return"
  ) +
  scale_x_continuous(labels = scales::percent) +
  scale_y_continuous(labels = scales::percent) +
  theme_minimal()
```

### Distribution of Buy-in over the Years

From this chart, users will be able to gain insights from trading activity trends by year. Some stocks may show seasonal trading volume spikes for example year-end or earnings-related boosts.

```{r}
#| echo: false

# Step 1: Filter past 5 years only
volume_5yr <- stock_data %>%
  filter(date >= Sys.Date() %m-% years(5)) %>%
  mutate(
    year = year(date),
    month = month(date, label = TRUE)
  ) %>%
  group_by(symbol, year, month) %>%
  summarise(total_volume = sum(volume, na.rm = TRUE), .groups = "drop")

# Step 2: Plot barchart faceted by stock, grouped by year
ggplot(volume_5yr, aes(x = month, y = total_volume, fill = factor(year))) +
  geom_col(position = "dodge") +
  facet_wrap(~ symbol, scales = "free_y") +
  labs(
    title = "üìä Monthly Trading Volume by Stock (Past 5 Years)",
    x = "Month", y = "Total Volume",
    fill = "Year"
  ) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal()
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Step 1: Filter past 5 years only
volume_5yr <- stock_data %>%
  filter(date >= Sys.Date() %m-% years(5)) %>%
  mutate(
    year = year(date),
    month = month(date, label = TRUE)
  ) %>%
  group_by(symbol, year, month) %>%
  summarise(total_volume = sum(volume, na.rm = TRUE), .groups = "drop")

# Step 2: Plot barchart faceted by stock, grouped by year
ggplot(volume_5yr, aes(x = month, y = total_volume, fill = factor(year))) +
  geom_col(position = "dodge") +
  facet_wrap(~ symbol, scales = "free_y") +
  labs(
    title = "üìä Monthly Trading Volume by Stock (Past 5 Years)",
    x = "Month", y = "Total Volume",
    fill = "Year"
  ) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal()
```

## Data Overview (CDA)

### 1. Wilcoxon Rank-Sum Test (Median Comparison)

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

# Replace with user-defined stock selection
stock_a <- "AMZN"
stock_b <- "TSLA"

run_wilcoxon_test <- function(stock_a, stock_b, data = stock_data) {
  df <- data %>%
    filter(symbol %in% c(stock_a, stock_b)) %>%
    select(symbol, daily_return) %>%
    filter(!is.na(daily_return))
  wilcox.test(daily_return ~ symbol, data = df)
}

run_f_test <- function(stock1, stock2, data = stock_data) {
  df <- data %>%
    filter(symbol %in% c(stock1, stock2)) %>%
    select(symbol, daily_return) %>%
    filter(!is.na(daily_return))
  var.test(daily_return ~ symbol, data = df)
}
```

Observation:

-   p-value = 0.6222 is much higher than 0.05 ‚Üí So you fail to reject the null hypothesis.

-   There is no statistically significant difference in the median daily returns of AMZN and TSLA.

### 2. F-Test for Variance Comparison

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

# üìå Simulated user input (replace with input$stock1 / input$stock2 in Shiny later)
stock1 <- "AMZN"
stock2 <- "MSFT"

run_variance_test <- function(stock1, stock2, data = stock_data) {
  # Step 1: Filter and prepare data
  var_test_data <- data %>%
    filter(symbol %in% c(stock1, stock2)) %>%
    select(symbol, daily_return) %>%
    filter(!is.na(daily_return))
  
  # Step 2: Run F-Test
  if (nrow(var_test_data) == 0) {
    message("No data found for variance comparison between ", stock1, " and ", stock2)
    return(NULL)
  }
  
  cat("üìä F-Test for Variance Comparison:\n")
  cat(paste0("Comparing variance of daily returns: ", stock1, " vs ", stock2, "\n\n"))
  test_result <- var.test(daily_return ~ symbol, data = var_test_data)
  
  return(test_result)
}

run_variance_test("AMZN", "MSFT")
```

### 3. Pearson Correlation Test (Relationship)

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

stock1 <- "AMZN"
stock2 <- "MSFT"

run_correlation_test <- function(stock1, stock2, data = stock_data) {
  # Step 1: Filter and prepare data
  cor_data <- data %>%
    filter(symbol %in% c(stock1, stock2)) %>%
    select(symbol, date, daily_return) %>%
    filter(!is.na(daily_return)) %>%
    pivot_wider(names_from = symbol, values_from = daily_return)
  
  # Step 2: Check if both columns exist and have sufficient data
  if (!(stock1 %in% names(cor_data)) | !(stock2 %in% names(cor_data))) {
    message("‚ùå One or both stocks not available in daily_return data.")
    return(NULL)
  }
  
  cor_data <- cor_data %>%
    filter(!is.na(.data[[stock1]]), !is.na(.data[[stock2]]))
  
  if (nrow(cor_data) < 10) {
    message("‚ö† Not enough data to compute correlation between ", stock1, " and ", stock2)
    return(NULL)
  }
  
  # Step 3: Run correlation test
  cat("üìä Pearson Correlation Test:\n")
  cat(paste0("Testing daily return correlation: ", stock1, " vs ", stock2, "\n\n"))
  result <- cor.test(cor_data[[stock1]], cor_data[[stock2]], method = "pearson")
  return(result)
}

run_correlation_test("AMZN", "MSFT")
```

### 4. Multiple Linear Regression: Return \~ Volume + Market Index

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

run_linear_regression <- function(target_stock, market_index_stock, data = stock_data) {
  # Step 1: Prepare dataset
  reg_data <- data %>%
    filter(symbol %in% c(target_stock, market_index_stock)) %>%
    select(date, symbol, daily_return, volume) %>%
    pivot_wider(names_from = symbol, values_from = c(daily_return, volume))

  # Step 2: Construct dynamic column names
  target_return_col <- paste0("daily_return_", target_stock)
  target_volume_col <- paste0("volume_", target_stock)
  market_return_col <- paste0("daily_return_", market_index_stock)

  # Step 3: Rename for regression model
  reg_data <- reg_data %>%
    rename(
      target_return = !!target_return_col,
      target_volume = !!target_volume_col,
      market_return = !!market_return_col
    ) %>%
    filter(!is.na(target_return), !is.na(target_volume), !is.na(market_return))

  # Step 4: Check if enough observations
  if (nrow(reg_data) < 10) {
    message("‚ö† Not enough data to run regression for ", target_stock)
    return(NULL)
  }

  # Step 5: Run regression
  cat(paste0("üìä Multiple Linear Regression: ", target_stock, " ~ Volume + ", market_index_stock, " Return\n\n"))
  model <- lm(target_return ~ target_volume + market_return, data = reg_data)
  return(summary(model))
}


run_linear_regression("AMZN", "MSFT")
```

### 5. ANOVA Test (One-way or Two-way)

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"

run_anova_test <- function(data = stock_data) {
  anova_data <- data %>%
    select(symbol, daily_return) %>%
    filter(!is.na(daily_return))

  if (length(unique(anova_data$symbol)) < 2) {
    message("‚ö† Not enough groups to run one-way ANOVA.")
    return(NULL)
  }

  anova_model <- aov(daily_return ~ symbol, data = anova_data)

  cat("üìä One-Way ANOVA: Daily Return ~ Stock Symbol\n\n")
  return(summary(anova_model))
}

run_anova_test()
```

### 5. Two-way ANOVA (Return \~ Symbol + Month)

```{r}
run_two_way_anova_test <- function(data = stock_data) {
  data <- data %>%
    mutate(month = lubridate::month(date, label = TRUE))

  anova2_data <- data %>%
    select(symbol, daily_return, month) %>%
    filter(!is.na(daily_return))

  if (length(unique(anova2_data$symbol)) < 2 || length(unique(anova2_data$month)) < 2) {
    message("‚ö† Not enough groups to run two-way ANOVA.")
    return(NULL)
  }

  anova2_model <- aov(daily_return ~ symbol + month, data = anova2_data)

  cat("üìä Two-Way ANOVA: Daily Return ~ Stock Symbol + Month\n\n")
  return(summary(anova2_model))
}


run_two_way_anova_test()
```

### 6. Event Study Analysis ‚Äì Cumulative Abnormal Returns (CAR) during COVID (2020‚Äì2022)
Cumulative Abnormal Return (CAR) analysis ‚Äî a common method in event studies used to determine whether a stock's returns deviate significantly from expected (normal) performance during a specific period.

```{r}
run_event_study <- function(target_stock = "NVDA",
                            market_index_stock = "MSFT",
                            start_date = "2020-01-01",
                            end_date = "2022-12-31") {
  
  # Step 1: Get data
  event_stocks <- unique(c(target_stock, market_index_stock))
  event_stock_data <- tq_get(event_stocks, from = start_date, to = end_date) %>%
    group_by(symbol) %>%
    arrange(date) %>%
    mutate(daily_return = adjusted / lag(adjusted) - 1) %>%
    ungroup()
  
  # Step 2: Pivot to wide format
  event_df <- event_stock_data %>%
    select(date, symbol, daily_return) %>%
    filter(!is.na(daily_return)) %>%
    pivot_wider(names_from = symbol, values_from = daily_return)
  
  # Step 3: Rename dynamically
  if (!target_stock %in% colnames(event_df) || !market_index_stock %in% colnames(event_df)) {
    stop("‚ùå One or both selected stocks not available in event return data.")
  }

  colnames(event_df)[which(colnames(event_df) == target_stock)] <- "target_return"
  colnames(event_df)[which(colnames(event_df) == market_index_stock)] <- "market_return"
  
  # Step 4: OLS Regression for expected return
  model <- lm(target_return ~ market_return, data = event_df)
  
  # Step 5: Calculate abnormal returns & CAR
  event_df$expected_return <- predict(model, newdata = event_df)
  event_df <- event_df %>%
    mutate(
      abnormal_return = target_return - expected_return,
      CAR = cumsum(abnormal_return)
    )
  
  # Step 6: Plot CAR
  plot_ly(event_df, x = ~date, y = ~CAR, type = "scatter", mode = "lines",
          line = list(color = "darkblue")) %>%
    layout(
      title = paste0(target_stock, " Cumulative Abnormal Return (", start_date, " to ", end_date, ")"),
      xaxis = list(title = "Date"),
      yaxis = list(title = "Cumulative Abnormal Return (CAR)")
    )
}

run_event_study("AMZN", "MSFT")           # Default COVID period
run_event_study("TSLA", "SPY", "2019-01-01", "2021-12-31")  # Custom
```
